image:
  name: abree05/ansible_tf_aws
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin/:/usr/sbin:/usr/bin/:/sbin:/bin'

variables:
  STATE: gl-tf-an.tfstate

before_script:
  - rm -rf .terraform
  - terraform --version
  - export AWS_ACCESS_KEY_ID
  - export AWS_SECRET_ACCESS_KEY
  - terraform init 
  - echo "$ANSIBLE_SSHKEY" > ansible.key
  - chmod 400 ansible.key
  - export ANSIBLE_HOST_KEY_CHECKING=False
 


stages:
  - conf_dns_validate
  - conf_dns_plan
  - conf_dns_apply
  - conf_dns_py
  - validate
  - plan
  - apply
  - deploy
  - destroy

conf_dns_validate:
  stage: conf_dns_validate
  script:
    - cd dns/
    - terraform init
    - terraform validate

conf_dns_plan:
  stage: conf_dns_plan
  script:
    - cd dns/
    - terraform init
    - terraform plan -state=gl-tf-an-dns.tfstate -out "dnsplanfile"
  dependencies:
    - conf_dns_validate
  artifacts:
    paths:
      - dns/dnsplanfile

conf_dns_apply:
  stage: conf_dns_apply
  script:
   - cd dns/
   - terraform init
   - terraform apply -state=gl-tf-an-dns.tfstate -input=false "dnsplanfile"
  dependencies:
    - conf_dns_plan

conf_dns_py:
  stage: conf_dns_py
  script:
    - cd dns/
    - echo "$dnsconfig" >> config.py
    - python3 dns.py

validate:
  stage: validate
  script:
    - terraform validate

plan:
  stage: plan
  script:
    - terraform plan -state=$STATE -out "planfile"
  dependencies:
    - validate
  artifacts:
    paths:
      - planfile

apply:
  stage: apply
  script:
    - mkdir hosts/
    - touch hosts/hosts.ini
    - echo "[web]" >> hosts/hosts.ini
    - terraform apply -state=$STATE -input=false "planfile"
  dependencies:
    - plan
  artifacts:
    paths:
      - hosts/hosts.ini

deploy:
  stage: deploy
  script:
    - mkdir secret
    - echo "$ANSIBLE_VAULT_PASS" >> secret/vault-pass
    - ansible-playbook --vault-password-file secret/vault-pass -i hosts/hosts.ini --private-key ansible.key -u ubuntu main.yml
  dependencies:
    - apply

destroy:
  stage: destroy
  script:
    - terraform destroy -state=$STATE -auto-approve
  dependencies:
    - apply
  when: manual